# 1. Ensure that your repository contains the necessary configuration
#    Google Kubernetes Engine cluster,including deployment.yml, kustomization.yml, service.yml, etc.

# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

# TODO
# 1. setup kustomization
# 2. create k8s env namespace (mach kustomization), in here is 'staging' and 'production'
# 3. finish the env variable

# prettier-ignore
name: Firstory release deploy

on:
  release:    
    types: [published]

env:    
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: asia-east1-a
  GKE_CLUSTER: graphql-prisma-asia 
  IMAGE: graphql
  REGISTRY_HOSTNAME: gcr.io
  DEPLOYMENT_NAME: graphql

jobs:
  DeployStaging:
    - name: Deploy to staging
      run: |
        echo "github.ref is"

    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-20.04
    environment: 
      name: Staging
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker

    - run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Create image name and tag
      run: echo "IMAGE_WITH_TAG=$REGISTRY_HOSTNAME/${{ secrets.GKE_PROJECT }}/$IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" >> $GITHUB_ENV

    # Build the Docker image
    - name: Build
      run: docker build --tag "$IMAGE_WITH_TAG" -f docker/Dockerfile .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: docker push "$IMAGE_WITH_TAG"

    # Set up kustomize
    - name: Set up Kustomize
      run: |
        curl -o kustomize.tar.gz --location https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.2.0/kustomize_v4.2.0_linux_amd64.tar.gz
        tar zxvf kustomize.tar.gz
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        cd kubernetes/base
        ../../kustomize edit set image PROJECT/IMAGE=$IMAGE_WITH_TAG
        ../../kustomize build ../overlays/staging | kubectl apply -f -
